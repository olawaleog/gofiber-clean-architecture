basePath: /
definitions:
  model.ChangePasswordModel:
    properties:
      new_password:
        type: string
      old_password:
        type: string
    type: object
  model.GeneralResponse:
    properties:
      code:
        type: integer
      data: {}
      message:
        type: string
      success:
        type: boolean
    type: object
  model.LoginModel:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  model.UserModel:
    properties:
      city:
        type: string
      emailAddress:
        type: string
      fileName:
        type: string
      firstName:
        type: string
      id:
        type: integer
      isActive:
        type: boolean
      lastName:
        type: string
      password:
        type: string
      phoneNumber:
        type: string
      postalCode:
        type: string
      region:
        type: string
      role:
        type: string
      street:
        type: string
      username:
        type: string
    type: object
host: localhost:9999
info:
  contact:
    email: fiber@swagger.io
    name: API Support
  description: Baseline project using Go Fiber
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Go Fiber Clean Architecture
  version: 1.0.0
paths:
  /v1/api/authentication:
    post:
      consumes:
      - application/json
      description: authenticate user.
      parameters:
      - description: Request Body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.LoginModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GeneralResponse'
      summary: authenticate user
      tags:
      - Authenticate user
  /v1/api/change-pasword:
    post:
      consumes:
      - application/json
      description: change password.
      parameters:
      - description: Request Body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.ChangePasswordModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GeneralResponse'
      security:
      - JWT: []
      summary: change password
      tags:
      - Authenticate user
  /v1/api/register:
    post:
      consumes:
      - application/json
      description: register new user.
      parameters:
      - description: Request Body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.UserModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GeneralResponse'
      summary: register user
      tags:
      - Authenticate user
  /v1/api/transaction-detail/{id}:
    get:
      consumes:
      - application/json
      description: Get one exists transaction detail.
      parameters:
      - description: Transaction Detail Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GeneralResponse'
      security:
      - JWT: []
      summary: get one exists transaction detail
      tags:
      - Transaction Detail
  /v1/api/users:
    get:
      description: list users.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GeneralResponse'
      security:
      - JWT: []
      summary: list users
      tags:
      - Authenticate user
schemes:
- http
- https
securityDefinitions:
  JWT:
    description: Authorization For JWT
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
